<?xml version="1.0" encoding="ISO-8859-1"?>
<!--
* The contents of this file are subject to the terms
* of the Common Development and Distribution License
* (the License). You may not use this file except in
* compliance with the License.
*
* You can obtain a copy of the License at
* http://www.sun.com/cddl/cddl.html or
* install_dir/legal/LICENSE
* See the License for the specific language governing
* permission and limitations under the License.
*
* When distributing Covered Code, include this CDDL
* Header Notice in each file and include the License file
* at install_dir/legal/LICENSE.
* If applicable, add the following below the CDDL Header,
* with the fields enclosed by brackets [] replaced by
* your own identifying information:
* "Portions Copyrighted [year] [name of copyright owner]"
*
* $Id$
*
* Copyright 2005-2009 Sun Microsystems Inc. All Rights Reserved
-->
<project name="Faban Common Facilities" default="fabancommon.jar">

    <!-- Compiler options -->
    <property file="build.properties"/>
    <property file="build-defaults.properties"/>
    <property name="compile.output" value="build/classes"/>
    <property name="compile.test.output" value="build/test/classes"/>
    <property name="test.results.dir" value="build/test/output"/>
    <property name="jar.output" value="build/lib"/>
    <property name="jar.file" value="fabancommon.jar"/>

    <path id="test.class.path">
        <pathelement path="${compile.output}"/>
        <pathelement path="${junit.jar}"/>
        <pathelement path="${compile.test.output}"/>
    </path>

    <path id="source.path">
        <dirset dir=".">
            <include name="src"/>
        </dirset>
    </path>

    <path id="test.path">
        <dirset dir=".">
            <include name="test"/>
        </dirset>
    </path>

    <target name="compile"
        description="Compile Faban Common Facilities classes">
        <mkdir dir="${compile.output}"/>
        <javac destdir="${compile.output}" debug="${compiler.debug}"
            nowarn="${compiler.generate.no.warnings}"
            source="${compiler.source.version}" includeantruntime="false"
            memoryMaximumSize="${compiler.max.memory}" fork="true">
            <compilerarg line="${compiler.args}"/>
            <src refid="source.path"/>
        </javac>
    </target>

    <target name="compile-tests" depends="compile"
        description="Compile Faban Common Facilities JUnit Test Cases">
        <mkdir dir="${compile.test.output}"/>
        <javac destdir="${compile.test.output}" debug="${compiler.debug}"
            nowarn="${compiler.generate.no.warnings}"
            source="${compiler.source.version}" includeantruntime="false"
            memoryMaximumSize="${compiler.max.memory}" fork="true">
            <compilerarg line="${compiler.args}"/>
            <classpath refid="test.class.path"/>
            <src refid="test.path"/>
        </javac>
    </target>

    <target name="compile-selected-files-in-src">
        <fail unless="files">Must set property "files"</fail>
        <mkdir dir="${compile.output}"/>
        <javac destdir="build" includes="${files}" srcdir="src" includeantruntime="false"/>
    </target>


    <target name="run-tests" depends="compile-tests"
        description="Compile Faban Harness JUnit Test Cases">
        <mkdir dir="${test.results.dir}"/>
        <junit showoutput="true"
           fork="true"
           failureproperty="tests.failed"
           errorproperty="tests.failed">
            <jvmarg value="-Dfaban.home=${java.io.tmpdir}"/>
            <batchtest todir="${test.results.dir}">
                <fileset dir="test">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
            <classpath refid="test.class.path"/>
            <formatter usefile="false" type="brief"/>
            <formatter type="xml"/>
        </junit>
    </target>


    <target name="run-single-test"
        description="Runs Single JUnit Test Case">
        <fail unless="run.class">Must set property "run.class"</fail>
        <junit dir="${test.results.dir}" printsummary="true" showoutput="true" fork="true">
            <jvmarg value="-Dfaban.home=${java.io.tmpdir}"/>
            <classpath refid="test.class.path"></classpath>
            <formatter type="brief" usefile="false"></formatter>
            <formatter type="xml"></formatter>
            <test name="${run.class}"></test>
        </junit>
    </target>

    <target name="debug-single-test" depends="compile-tests"
        description="Runs Single JUnit Test Case">
        <fail unless="debug.class">Must set property "debug.class"</fail>
        <path id="sourcepath">
            <pathelement path="src/"></pathelement>
            <pathelement path="test/"></pathelement>
        </path>
        <nbjpdastart transport="dt_socket" name="perspective" addressproperty="jpda.address">
            <classpath refid="test.class.path"></classpath>
            <sourcepath refid="sourcepath"></sourcepath>
        </nbjpdastart>
        <junit dir="${test.results.dir}" printsummary="true" showoutput="true" fork="true">
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xnoagent"/>
            <jvmarg value="-Dfaban.home=${java.io.tmpdir}"/>
            <jvmarg value="-Djava.compiler=none"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address},suspend=y"/>
            <formatter type="xml"></formatter>
            <formatter type="brief"  usefile="false"></formatter>
            <classpath refid="test.class.path"></classpath>
            <test name="${debug.class}"></test>
        </junit>
    </target>

    <target name="rmic" depends="compile"
        description="Create rmi stubs and skeletons">
        <rmic base="${compile.output}"
            stubversion="1.2"
            includes="**/*Impl.class"
            excludes="**/*$*.class"/>
    </target>

    <target name="fabancommon.jar" depends="rmic"
        description="Package fabancommon.jar">
        <mkdir dir="${jar.output}"/>
        <jar jarfile="${jar.output}/${jar.file}">
            <fileset dir="${compile.output}" includes="**"/>
        </jar>
    </target>

    <target name="clean" description="cleanup module">
        <delete dir="${compile.output}"/>
        <delete dir="${jar.output}"/>
    </target>
</project>
